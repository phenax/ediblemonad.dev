{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/blog.tsx","webpack:///./src/helpers/datetime.ts","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["React","createContext","PropTypes","object","string","isRequired","func","__webpack_require__","d","__webpack_exports__","pageQuery","BlogIndex","_ref","_ref$data","data","_ref2","allMdx","edges","totalCount","react_default","a","createElement","map","_ref3","post","node","key","id","gatsby_link_default","to","frontmatter","slug","title","description","toBlogFormat","publishDate","ramda__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_fp__WEBPACK_IMPORTED_MODULE_2__","compose","format","parse","Date","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","json","propTypes","shape"],"mappings":"6JAY2BA,IAAMC,cAAc,IA0CvCC,IAAUC,OACTD,IAAUE,OAAOC,WAChBH,IAAUI,KACRJ,IAAUI,kBCzDtBC,EAAAC,EAAAC,EAAA,8BAAAC,IA8CeC,UAxBG,SAAAC,GAA+D,IAAAC,EAAAD,EAA5DE,KAA4DC,GAAAF,OAAA,IAAAA,EAAzC,CAAEG,YAAQ,GAA+BH,GAApDG,QACa,CAAEC,MAAO,GAAIC,WAAY,GAAzDD,EADuEF,EACvEE,MAAOC,EADgEH,EAChEG,WAEf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACQF,EAAAC,EAAAC,cAAA,cAASH,IAEjBC,EAAAC,EAAAC,cAAA,WACGJ,EAAMK,IAAI,SAAAC,GAAA,IAASC,EAATD,EAAGE,KAAH,OACTN,EAAAC,EAAAC,cAAA,OAAKK,IAAKF,EAAKG,IACbR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAMS,GAAE,SAAWL,EAAKM,YAAYC,MAClCZ,EAAAC,EAAAC,cAAA,WAAMG,EAAKM,YAAYE,OACvBb,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,WAAMG,EAAKM,YAAYG,YAAvB,MAAuCC,YAAaV,EAAKM,YAAYK,sBAdrF,IA0BazB,EAAS,+CChDtBH,EAAAC,EAAAC,EAAA,sBAAAyB,IAAA,IAAAE,EAAA7B,EAAA,KAAA8B,EAAA9B,EAAA,KAAA+B,EAAA/B,EAAA,KAKa2B,EAAeK,YAC1BC,YAAO,gBACPC,YAJwB,IAAIC,KAIP,oCCPvB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,8GCMzCK,EAAmB,SAAApC,GAAkB,IAAfqC,EAAerC,EAAfqC,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOrD,IAAMqB,cAAciC,IAApBC,IAAA,CACLN,WACAC,iBACGA,EAAcM,QAIrBR,EAAiBS,UAAY,CAC3BR,SAAU/C,IAAUwD,MAAM,CACxBL,SAAUnD,IAAUE,OAAOC,aAC1BA,YAGU2C","file":"component---src-pages-blog-tsx-94cfd717d6d37b16b6ab.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\n\nimport { FrontMatter } from '../types/blog';\nimport { toBlogFormat } from '../helpers/datetime';\n\ninterface BlogPost {\n  node: {\n    id: string,\n    frontmatter: FrontMatter\n  }\n};\n\ninterface BlogIndexProps {\n  data: {\n    allMdx?: {\n      edges: BlogPost[],\n      totalCount: number,\n    }\n  }\n};\n\nconst BlogIndex = ({ data: { allMdx } = { allMdx: void 0 } }: BlogIndexProps) => {\n  const { edges, totalCount } = allMdx || { edges: [], totalCount: 0 };\n\n  return (\n    <div>\n      <div>\n        Posts <strong>{totalCount}</strong>\n      </div>\n      <div>\n        {edges.map(({ node: post }) => (\n          <div key={post.id}>\n            <Link to={`/blog/${post.frontmatter.slug}`}>\n              <div>{post.frontmatter.title}</div>\n              <small>\n                <div>{post.frontmatter.description} - {toBlogFormat(post.frontmatter.publishDate)}</div>\n              </small>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query BlogPosts {\n    allMdx(filter: { frontmatter: { published: { eq: true } } }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            slug\n            description\n            publishDate\n          }\n          wordCount {\n            paragraphs\n            sentences\n            words\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`;","import { compose } from 'ramda';\nimport { parse, format } from 'date-fns/fp';\n\nconst getBaseDate = () => new Date();\n\nexport const toBlogFormat = compose(\n  format('do MMM, yyyy'),\n  parse(getBaseDate(), 'yyyy/MM/dd'),\n);\n\nexport { parse, format };\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}