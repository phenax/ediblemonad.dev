{"version":3,"sources":["webpack:///./src/blog-layout.tsx","webpack:///./src/pages/blog/test.mdx","webpack:///./src/helpers/datetime.ts"],"names":["blog_layout","_ref","children","frontmatter","pageContext","props","objectWithoutPropertiesLoose_default","react_default","a","createElement","Helmet","title","name","content","description","tags","toBlogFormat","publishDate","JSON","stringify","layoutProps","MDXContent","_this","_React$Component","call","this","layout","DefaultLayout","render","_this$props","components","dist","Layout","Object","assign","className","data-language","style","counterReset","aria-hidden","whiteSpace","width","left","React","Component","isMDXComponent","_frontmatter","__webpack_require__","d","__webpack_exports__","ramda__WEBPACK_IMPORTED_MODULE_0__","date_fns_fp__WEBPACK_IMPORTED_MODULE_1__","date_fns_fp__WEBPACK_IMPORTED_MODULE_2__","compose","format","parse","Date"],"mappings":"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","file":"component---src-pages-blog-test-mdx-7b1778c6d149f9ae41be.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { FrontMatter } from './types/blog';\nimport { toBlogFormat } from './helpers/datetime';\n\ninterface Props {\n  children: any,\n  pageContext: {\n    frontmatter: FrontMatter\n  }\n};\n\nexport default ({ children, pageContext: { frontmatter }, ...props }: Props) => (\n  <div>\n    <Helmet>\n      <title>{frontmatter.title}</title>\n      <meta name=\"content\" content={frontmatter.description} />\n      <meta name=\"keywords\" content={frontmatter.tags} />\n    </Helmet>\n    <h1>{frontmatter.title}</h1>\n    <small>\n      <div>{toBlogFormat(frontmatter.publishDate)}</div>\n    </small>\n    <pre>{JSON.stringify(props, null, 2)}</pre>\n    {children}\n  </div>\n);\n","import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n\n\n  import DefaultLayout from \"/home/akshayn/Desktop/my-website/src/blog-layout.tsx\";\nconst layoutProps = {};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = DefaultLayout;\n  }\n\n  render() {\n    const {\n      components,\n      ...props\n    } = this.props;\n    return <MDXTag name=\"wrapper\" Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)} components={components}>\n\n      <MDXTag name=\"p\" components={components}>{`Gonna add stuff here`}</MDXTag>\n      <div className=\"gatsby-highlight\" data-language=\"js\"><pre style={{\n          \"counterReset\": \"linenumber NaN\"\n        }} className=\"language-js line-numbers\"><code className=\"language-js\"><span className=\"token keyword\">const</span> ex <span className=\"token operator\">=</span> code<span className=\"token punctuation\">.</span><span className=\"token function\">examples</span><span className=\"token punctuation\">(</span><span className=\"token punctuation\">)</span><span className=\"token punctuation\">;</span>\n\nex<span className=\"token punctuation\">.</span>shouldBeHighlighted <span className=\"token operator\">=</span> <span className=\"token boolean\">true</span><span className=\"token punctuation\">;</span></code><span aria-hidden=\"true\" className=\"line-numbers-rows\" style={{\n            \"whiteSpace\": \"normal\",\n            \"width\": \"auto\",\n            \"left\": \"0px\"\n          }}><span></span><span></span><span></span></span></pre></div>\n      <MDXTag name=\"p\" components={components}>{`So lets talk about `}<code className=\"language-text\">inline stuff</code>{`. More specifically, `}<code className=\"language-js\"> <span className=\"token keyword\">const</span> wow <span className=\"token operator\">=</span> <span className=\"token string\">\"gello\"</span><span className=\"token punctuation\">;</span></code></MDXTag>\n           </MDXTag>;\n  }\n\n}\nMDXContent.isMDXComponent = true;\nexport const _frontmatter = {};\n      ","import { compose } from 'ramda';\nimport { parse, format } from 'date-fns/fp';\n\nconst getBaseDate = () => new Date();\n\nexport const toBlogFormat = compose(\n  format('do MMM, yyyy'),\n  parse(getBaseDate(), 'yyyy/MM/dd'),\n);\n\nexport { parse, format };\n"],"sourceRoot":""}